// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/db"
	"github.com/concourse/atc/exec"
	"github.com/concourse/atc/worker"
)

type FakeTaskDelegate struct {
	InitializingStub        func(atc.TaskConfig)
	initializingMutex       sync.RWMutex
	initializingArgsForCall []struct {
		arg1 atc.TaskConfig
	}
	StartedStub         func()
	startedMutex        sync.RWMutex
	startedArgsForCall  []struct{}
	FinishedStub        func(exec.ExitStatus)
	finishedMutex       sync.RWMutex
	finishedArgsForCall []struct {
		arg1 exec.ExitStatus
	}
	FailedStub        func(error)
	failedMutex       sync.RWMutex
	failedArgsForCall []struct {
		arg1 error
	}
	GetBuildStub        func(buildID int) (db.Build, bool, error)
	getBuildMutex       sync.RWMutex
	getBuildArgsForCall []struct {
		buildID int
	}
	getBuildReturns struct {
		result1 db.Build
		result2 bool
		result3 error
	}
	GetLatestFinishedBuildForJobStub        func(string, int) (db.Build, bool, error)
	getLatestFinishedBuildForJobMutex       sync.RWMutex
	getLatestFinishedBuildForJobArgsForCall []struct {
		arg1 string
		arg2 int
	}
	getLatestFinishedBuildForJobReturns struct {
		result1 db.Build
		result2 bool
		result3 error
	}
	ImageVersionDeterminedStub        func(worker.VolumeIdentifier) error
	imageVersionDeterminedMutex       sync.RWMutex
	imageVersionDeterminedArgsForCall []struct {
		arg1 worker.VolumeIdentifier
	}
	imageVersionDeterminedReturns struct {
		result1 error
	}
	FindLongLivedContainersStub        func(jobName string, pipelineID int) ([]db.SavedContainer, error)
	findLongLivedContainersMutex       sync.RWMutex
	findLongLivedContainersArgsForCall []struct {
		jobName    string
		pipelineID int
	}
	findLongLivedContainersReturns struct {
		result1 []db.SavedContainer
		result2 error
	}
	FindContainersByDescriptorsStub        func(db.Container) ([]db.SavedContainer, error)
	findContainersByDescriptorsMutex       sync.RWMutex
	findContainersByDescriptorsArgsForCall []struct {
		arg1 db.Container
	}
	findContainersByDescriptorsReturns struct {
		result1 []db.SavedContainer
		result2 error
	}
	StdoutStub        func() io.Writer
	stdoutMutex       sync.RWMutex
	stdoutArgsForCall []struct{}
	stdoutReturns     struct {
		result1 io.Writer
	}
	StderrStub        func() io.Writer
	stderrMutex       sync.RWMutex
	stderrArgsForCall []struct{}
	stderrReturns     struct {
		result1 io.Writer
	}
}

func (fake *FakeTaskDelegate) Initializing(arg1 atc.TaskConfig) {
	fake.initializingMutex.Lock()
	fake.initializingArgsForCall = append(fake.initializingArgsForCall, struct {
		arg1 atc.TaskConfig
	}{arg1})
	fake.initializingMutex.Unlock()
	if fake.InitializingStub != nil {
		fake.InitializingStub(arg1)
	}
}

func (fake *FakeTaskDelegate) InitializingCallCount() int {
	fake.initializingMutex.RLock()
	defer fake.initializingMutex.RUnlock()
	return len(fake.initializingArgsForCall)
}

func (fake *FakeTaskDelegate) InitializingArgsForCall(i int) atc.TaskConfig {
	fake.initializingMutex.RLock()
	defer fake.initializingMutex.RUnlock()
	return fake.initializingArgsForCall[i].arg1
}

func (fake *FakeTaskDelegate) Started() {
	fake.startedMutex.Lock()
	fake.startedArgsForCall = append(fake.startedArgsForCall, struct{}{})
	fake.startedMutex.Unlock()
	if fake.StartedStub != nil {
		fake.StartedStub()
	}
}

func (fake *FakeTaskDelegate) StartedCallCount() int {
	fake.startedMutex.RLock()
	defer fake.startedMutex.RUnlock()
	return len(fake.startedArgsForCall)
}

func (fake *FakeTaskDelegate) Finished(arg1 exec.ExitStatus) {
	fake.finishedMutex.Lock()
	fake.finishedArgsForCall = append(fake.finishedArgsForCall, struct {
		arg1 exec.ExitStatus
	}{arg1})
	fake.finishedMutex.Unlock()
	if fake.FinishedStub != nil {
		fake.FinishedStub(arg1)
	}
}

func (fake *FakeTaskDelegate) FinishedCallCount() int {
	fake.finishedMutex.RLock()
	defer fake.finishedMutex.RUnlock()
	return len(fake.finishedArgsForCall)
}

func (fake *FakeTaskDelegate) FinishedArgsForCall(i int) exec.ExitStatus {
	fake.finishedMutex.RLock()
	defer fake.finishedMutex.RUnlock()
	return fake.finishedArgsForCall[i].arg1
}

func (fake *FakeTaskDelegate) Failed(arg1 error) {
	fake.failedMutex.Lock()
	fake.failedArgsForCall = append(fake.failedArgsForCall, struct {
		arg1 error
	}{arg1})
	fake.failedMutex.Unlock()
	if fake.FailedStub != nil {
		fake.FailedStub(arg1)
	}
}

func (fake *FakeTaskDelegate) FailedCallCount() int {
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	return len(fake.failedArgsForCall)
}

func (fake *FakeTaskDelegate) FailedArgsForCall(i int) error {
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	return fake.failedArgsForCall[i].arg1
}

func (fake *FakeTaskDelegate) GetBuild(buildID int) (db.Build, bool, error) {
	fake.getBuildMutex.Lock()
	fake.getBuildArgsForCall = append(fake.getBuildArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildMutex.Unlock()
	if fake.GetBuildStub != nil {
		return fake.GetBuildStub(buildID)
	} else {
		return fake.getBuildReturns.result1, fake.getBuildReturns.result2, fake.getBuildReturns.result3
	}
}

func (fake *FakeTaskDelegate) GetBuildCallCount() int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return len(fake.getBuildArgsForCall)
}

func (fake *FakeTaskDelegate) GetBuildArgsForCall(i int) int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return fake.getBuildArgsForCall[i].buildID
}

func (fake *FakeTaskDelegate) GetBuildReturns(result1 db.Build, result2 bool, result3 error) {
	fake.GetBuildStub = nil
	fake.getBuildReturns = struct {
		result1 db.Build
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTaskDelegate) GetLatestFinishedBuildForJob(arg1 string, arg2 int) (db.Build, bool, error) {
	fake.getLatestFinishedBuildForJobMutex.Lock()
	fake.getLatestFinishedBuildForJobArgsForCall = append(fake.getLatestFinishedBuildForJobArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.getLatestFinishedBuildForJobMutex.Unlock()
	if fake.GetLatestFinishedBuildForJobStub != nil {
		return fake.GetLatestFinishedBuildForJobStub(arg1, arg2)
	} else {
		return fake.getLatestFinishedBuildForJobReturns.result1, fake.getLatestFinishedBuildForJobReturns.result2, fake.getLatestFinishedBuildForJobReturns.result3
	}
}

func (fake *FakeTaskDelegate) GetLatestFinishedBuildForJobCallCount() int {
	fake.getLatestFinishedBuildForJobMutex.RLock()
	defer fake.getLatestFinishedBuildForJobMutex.RUnlock()
	return len(fake.getLatestFinishedBuildForJobArgsForCall)
}

func (fake *FakeTaskDelegate) GetLatestFinishedBuildForJobArgsForCall(i int) (string, int) {
	fake.getLatestFinishedBuildForJobMutex.RLock()
	defer fake.getLatestFinishedBuildForJobMutex.RUnlock()
	return fake.getLatestFinishedBuildForJobArgsForCall[i].arg1, fake.getLatestFinishedBuildForJobArgsForCall[i].arg2
}

func (fake *FakeTaskDelegate) GetLatestFinishedBuildForJobReturns(result1 db.Build, result2 bool, result3 error) {
	fake.GetLatestFinishedBuildForJobStub = nil
	fake.getLatestFinishedBuildForJobReturns = struct {
		result1 db.Build
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTaskDelegate) ImageVersionDetermined(arg1 worker.VolumeIdentifier) error {
	fake.imageVersionDeterminedMutex.Lock()
	fake.imageVersionDeterminedArgsForCall = append(fake.imageVersionDeterminedArgsForCall, struct {
		arg1 worker.VolumeIdentifier
	}{arg1})
	fake.imageVersionDeterminedMutex.Unlock()
	if fake.ImageVersionDeterminedStub != nil {
		return fake.ImageVersionDeterminedStub(arg1)
	} else {
		return fake.imageVersionDeterminedReturns.result1
	}
}

func (fake *FakeTaskDelegate) ImageVersionDeterminedCallCount() int {
	fake.imageVersionDeterminedMutex.RLock()
	defer fake.imageVersionDeterminedMutex.RUnlock()
	return len(fake.imageVersionDeterminedArgsForCall)
}

func (fake *FakeTaskDelegate) ImageVersionDeterminedArgsForCall(i int) worker.VolumeIdentifier {
	fake.imageVersionDeterminedMutex.RLock()
	defer fake.imageVersionDeterminedMutex.RUnlock()
	return fake.imageVersionDeterminedArgsForCall[i].arg1
}

func (fake *FakeTaskDelegate) ImageVersionDeterminedReturns(result1 error) {
	fake.ImageVersionDeterminedStub = nil
	fake.imageVersionDeterminedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskDelegate) FindLongLivedContainers(jobName string, pipelineID int) ([]db.SavedContainer, error) {
	fake.findLongLivedContainersMutex.Lock()
	fake.findLongLivedContainersArgsForCall = append(fake.findLongLivedContainersArgsForCall, struct {
		jobName    string
		pipelineID int
	}{jobName, pipelineID})
	fake.findLongLivedContainersMutex.Unlock()
	if fake.FindLongLivedContainersStub != nil {
		return fake.FindLongLivedContainersStub(jobName, pipelineID)
	} else {
		return fake.findLongLivedContainersReturns.result1, fake.findLongLivedContainersReturns.result2
	}
}

func (fake *FakeTaskDelegate) FindLongLivedContainersCallCount() int {
	fake.findLongLivedContainersMutex.RLock()
	defer fake.findLongLivedContainersMutex.RUnlock()
	return len(fake.findLongLivedContainersArgsForCall)
}

func (fake *FakeTaskDelegate) FindLongLivedContainersArgsForCall(i int) (string, int) {
	fake.findLongLivedContainersMutex.RLock()
	defer fake.findLongLivedContainersMutex.RUnlock()
	return fake.findLongLivedContainersArgsForCall[i].jobName, fake.findLongLivedContainersArgsForCall[i].pipelineID
}

func (fake *FakeTaskDelegate) FindLongLivedContainersReturns(result1 []db.SavedContainer, result2 error) {
	fake.FindLongLivedContainersStub = nil
	fake.findLongLivedContainersReturns = struct {
		result1 []db.SavedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskDelegate) FindContainersByDescriptors(arg1 db.Container) ([]db.SavedContainer, error) {
	fake.findContainersByDescriptorsMutex.Lock()
	fake.findContainersByDescriptorsArgsForCall = append(fake.findContainersByDescriptorsArgsForCall, struct {
		arg1 db.Container
	}{arg1})
	fake.findContainersByDescriptorsMutex.Unlock()
	if fake.FindContainersByDescriptorsStub != nil {
		return fake.FindContainersByDescriptorsStub(arg1)
	} else {
		return fake.findContainersByDescriptorsReturns.result1, fake.findContainersByDescriptorsReturns.result2
	}
}

func (fake *FakeTaskDelegate) FindContainersByDescriptorsCallCount() int {
	fake.findContainersByDescriptorsMutex.RLock()
	defer fake.findContainersByDescriptorsMutex.RUnlock()
	return len(fake.findContainersByDescriptorsArgsForCall)
}

func (fake *FakeTaskDelegate) FindContainersByDescriptorsArgsForCall(i int) db.Container {
	fake.findContainersByDescriptorsMutex.RLock()
	defer fake.findContainersByDescriptorsMutex.RUnlock()
	return fake.findContainersByDescriptorsArgsForCall[i].arg1
}

func (fake *FakeTaskDelegate) FindContainersByDescriptorsReturns(result1 []db.SavedContainer, result2 error) {
	fake.FindContainersByDescriptorsStub = nil
	fake.findContainersByDescriptorsReturns = struct {
		result1 []db.SavedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskDelegate) Stdout() io.Writer {
	fake.stdoutMutex.Lock()
	fake.stdoutArgsForCall = append(fake.stdoutArgsForCall, struct{}{})
	fake.stdoutMutex.Unlock()
	if fake.StdoutStub != nil {
		return fake.StdoutStub()
	} else {
		return fake.stdoutReturns.result1
	}
}

func (fake *FakeTaskDelegate) StdoutCallCount() int {
	fake.stdoutMutex.RLock()
	defer fake.stdoutMutex.RUnlock()
	return len(fake.stdoutArgsForCall)
}

func (fake *FakeTaskDelegate) StdoutReturns(result1 io.Writer) {
	fake.StdoutStub = nil
	fake.stdoutReturns = struct {
		result1 io.Writer
	}{result1}
}

func (fake *FakeTaskDelegate) Stderr() io.Writer {
	fake.stderrMutex.Lock()
	fake.stderrArgsForCall = append(fake.stderrArgsForCall, struct{}{})
	fake.stderrMutex.Unlock()
	if fake.StderrStub != nil {
		return fake.StderrStub()
	} else {
		return fake.stderrReturns.result1
	}
}

func (fake *FakeTaskDelegate) StderrCallCount() int {
	fake.stderrMutex.RLock()
	defer fake.stderrMutex.RUnlock()
	return len(fake.stderrArgsForCall)
}

func (fake *FakeTaskDelegate) StderrReturns(result1 io.Writer) {
	fake.StderrStub = nil
	fake.stderrReturns = struct {
		result1 io.Writer
	}{result1}
}

var _ exec.TaskDelegate = new(FakeTaskDelegate)
