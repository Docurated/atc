// This file was generated by counterfeiter
package buildstarterfakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/scheduler/buildstarter"
	"code.cloudfoundry.org/lager"
)

type FakeBuildStarter struct {
	TryStartAllPendingBuildsStub        func(logger lager.Logger, jobConfig atc.JobConfig, resourceConfigs atc.ResourceConfigs, resourceTypes atc.ResourceTypes) error
	tryStartAllPendingBuildsMutex       sync.RWMutex
	tryStartAllPendingBuildsArgsForCall []struct {
		logger          lager.Logger
		jobConfig       atc.JobConfig
		resourceConfigs atc.ResourceConfigs
		resourceTypes   atc.ResourceTypes
	}
	tryStartAllPendingBuildsReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBuildStarter) TryStartAllPendingBuilds(logger lager.Logger, jobConfig atc.JobConfig, resourceConfigs atc.ResourceConfigs, resourceTypes atc.ResourceTypes) error {
	fake.tryStartAllPendingBuildsMutex.Lock()
	fake.tryStartAllPendingBuildsArgsForCall = append(fake.tryStartAllPendingBuildsArgsForCall, struct {
		logger          lager.Logger
		jobConfig       atc.JobConfig
		resourceConfigs atc.ResourceConfigs
		resourceTypes   atc.ResourceTypes
	}{logger, jobConfig, resourceConfigs, resourceTypes})
	fake.recordInvocation("TryStartAllPendingBuilds", []interface{}{logger, jobConfig, resourceConfigs, resourceTypes})
	fake.tryStartAllPendingBuildsMutex.Unlock()
	if fake.TryStartAllPendingBuildsStub != nil {
		return fake.TryStartAllPendingBuildsStub(logger, jobConfig, resourceConfigs, resourceTypes)
	} else {
		return fake.tryStartAllPendingBuildsReturns.result1
	}
}

func (fake *FakeBuildStarter) TryStartAllPendingBuildsCallCount() int {
	fake.tryStartAllPendingBuildsMutex.RLock()
	defer fake.tryStartAllPendingBuildsMutex.RUnlock()
	return len(fake.tryStartAllPendingBuildsArgsForCall)
}

func (fake *FakeBuildStarter) TryStartAllPendingBuildsArgsForCall(i int) (lager.Logger, atc.JobConfig, atc.ResourceConfigs, atc.ResourceTypes) {
	fake.tryStartAllPendingBuildsMutex.RLock()
	defer fake.tryStartAllPendingBuildsMutex.RUnlock()
	return fake.tryStartAllPendingBuildsArgsForCall[i].logger, fake.tryStartAllPendingBuildsArgsForCall[i].jobConfig, fake.tryStartAllPendingBuildsArgsForCall[i].resourceConfigs, fake.tryStartAllPendingBuildsArgsForCall[i].resourceTypes
}

func (fake *FakeBuildStarter) TryStartAllPendingBuildsReturns(result1 error) {
	fake.TryStartAllPendingBuildsStub = nil
	fake.tryStartAllPendingBuildsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildStarter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tryStartAllPendingBuildsMutex.RLock()
	defer fake.tryStartAllPendingBuildsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBuildStarter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ buildstarter.BuildStarter = new(FakeBuildStarter)
