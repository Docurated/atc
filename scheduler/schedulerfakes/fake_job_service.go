// This file was generated by counterfeiter
package schedulerfakes

import (
	"sync"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/db/algorithm"
	"github.com/concourse/atc/scheduler"
	"github.com/pivotal-golang/lager"
)

type FakeJobService struct {
	CanBuildBeScheduledStub        func(logger lager.Logger, build db.Build, buildPrep db.BuildPreparation, versions *algorithm.VersionsDB, buildInputs []db.BuildInput) (bool, string, error)
	canBuildBeScheduledMutex       sync.RWMutex
	canBuildBeScheduledArgsForCall []struct {
		logger      lager.Logger
		build       db.Build
		buildPrep   db.BuildPreparation
		versions    *algorithm.VersionsDB
		buildInputs []db.BuildInput
	}
	canBuildBeScheduledReturns struct {
		result1 bool
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJobService) CanBuildBeScheduled(logger lager.Logger, build db.Build, buildPrep db.BuildPreparation, versions *algorithm.VersionsDB, buildInputs []db.BuildInput) (bool, string, error) {
	var buildInputsCopy []db.BuildInput
	if buildInputs != nil {
		buildInputsCopy = make([]db.BuildInput, len(buildInputs))
		copy(buildInputsCopy, buildInputs)
	}
	fake.canBuildBeScheduledMutex.Lock()
	fake.canBuildBeScheduledArgsForCall = append(fake.canBuildBeScheduledArgsForCall, struct {
		logger      lager.Logger
		build       db.Build
		buildPrep   db.BuildPreparation
		versions    *algorithm.VersionsDB
		buildInputs []db.BuildInput
	}{logger, build, buildPrep, versions, buildInputsCopy})
	fake.recordInvocation("CanBuildBeScheduled", []interface{}{logger, build, buildPrep, versions, buildInputsCopy})
	fake.canBuildBeScheduledMutex.Unlock()
	if fake.CanBuildBeScheduledStub != nil {
		return fake.CanBuildBeScheduledStub(logger, build, buildPrep, versions, buildInputs)
	} else {
		return fake.canBuildBeScheduledReturns.result1, fake.canBuildBeScheduledReturns.result2, fake.canBuildBeScheduledReturns.result3
	}
}

func (fake *FakeJobService) CanBuildBeScheduledCallCount() int {
	fake.canBuildBeScheduledMutex.RLock()
	defer fake.canBuildBeScheduledMutex.RUnlock()
	return len(fake.canBuildBeScheduledArgsForCall)
}

func (fake *FakeJobService) CanBuildBeScheduledArgsForCall(i int) (lager.Logger, db.Build, db.BuildPreparation, *algorithm.VersionsDB, []db.BuildInput) {
	fake.canBuildBeScheduledMutex.RLock()
	defer fake.canBuildBeScheduledMutex.RUnlock()
	return fake.canBuildBeScheduledArgsForCall[i].logger, fake.canBuildBeScheduledArgsForCall[i].build, fake.canBuildBeScheduledArgsForCall[i].buildPrep, fake.canBuildBeScheduledArgsForCall[i].versions, fake.canBuildBeScheduledArgsForCall[i].buildInputs
}

func (fake *FakeJobService) CanBuildBeScheduledReturns(result1 bool, result2 string, result3 error) {
	fake.CanBuildBeScheduledStub = nil
	fake.canBuildBeScheduledReturns = struct {
		result1 bool
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeJobService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.canBuildBeScheduledMutex.RLock()
	defer fake.canBuildBeScheduledMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeJobService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scheduler.JobService = new(FakeJobService)
