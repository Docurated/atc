// This file was generated by counterfeiter
package schedulerfakes

import (
	"sync"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/scheduler"
)

type FakeSchedulerBuildsDB struct {
	FinishBuildStub        func(buildID int, pipelineID int, status db.Status) error
	finishBuildMutex       sync.RWMutex
	finishBuildArgsForCall []struct {
		buildID    int
		pipelineID int
		status     db.Status
	}
	finishBuildReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSchedulerBuildsDB) FinishBuild(buildID int, pipelineID int, status db.Status) error {
	fake.finishBuildMutex.Lock()
	fake.finishBuildArgsForCall = append(fake.finishBuildArgsForCall, struct {
		buildID    int
		pipelineID int
		status     db.Status
	}{buildID, pipelineID, status})
	fake.recordInvocation("FinishBuild", []interface{}{buildID, pipelineID, status})
	fake.finishBuildMutex.Unlock()
	if fake.FinishBuildStub != nil {
		return fake.FinishBuildStub(buildID, pipelineID, status)
	} else {
		return fake.finishBuildReturns.result1
	}
}

func (fake *FakeSchedulerBuildsDB) FinishBuildCallCount() int {
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return len(fake.finishBuildArgsForCall)
}

func (fake *FakeSchedulerBuildsDB) FinishBuildArgsForCall(i int) (int, int, db.Status) {
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return fake.finishBuildArgsForCall[i].buildID, fake.finishBuildArgsForCall[i].pipelineID, fake.finishBuildArgsForCall[i].status
}

func (fake *FakeSchedulerBuildsDB) FinishBuildReturns(result1 error) {
	fake.FinishBuildStub = nil
	fake.finishBuildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSchedulerBuildsDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSchedulerBuildsDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scheduler.SchedulerBuildsDB = new(FakeSchedulerBuildsDB)
