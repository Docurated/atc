// This file was generated by counterfeiter
package schedulerfakes

import (
	"sync"

	"github.com/concourse/atc/config"
	"github.com/concourse/atc/db/algorithm"
	"github.com/concourse/atc/scheduler"
)

type FakeInputMapperDB struct {
	GetAlgorithmInputConfigsStub        func(db *algorithm.VersionsDB, jobName string, inputs []config.JobInput) (algorithm.InputConfigs, error)
	getAlgorithmInputConfigsMutex       sync.RWMutex
	getAlgorithmInputConfigsArgsForCall []struct {
		db      *algorithm.VersionsDB
		jobName string
		inputs  []config.JobInput
	}
	getAlgorithmInputConfigsReturns struct {
		result1 algorithm.InputConfigs
		result2 error
	}
	SaveIndependentInputMappingStub        func(inputVersions algorithm.InputMapping, jobName string) error
	saveIndependentInputMappingMutex       sync.RWMutex
	saveIndependentInputMappingArgsForCall []struct {
		inputVersions algorithm.InputMapping
		jobName       string
	}
	saveIndependentInputMappingReturns struct {
		result1 error
	}
	SaveNextInputMappingStub        func(inputVersions algorithm.InputMapping, jobName string) error
	saveNextInputMappingMutex       sync.RWMutex
	saveNextInputMappingArgsForCall []struct {
		inputVersions algorithm.InputMapping
		jobName       string
	}
	saveNextInputMappingReturns struct {
		result1 error
	}
	DeleteNextInputMappingStub        func(jobName string) error
	deleteNextInputMappingMutex       sync.RWMutex
	deleteNextInputMappingArgsForCall []struct {
		jobName string
	}
	deleteNextInputMappingReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInputMapperDB) GetAlgorithmInputConfigs(db *algorithm.VersionsDB, jobName string, inputs []config.JobInput) (algorithm.InputConfigs, error) {
	var inputsCopy []config.JobInput
	if inputs != nil {
		inputsCopy = make([]config.JobInput, len(inputs))
		copy(inputsCopy, inputs)
	}
	fake.getAlgorithmInputConfigsMutex.Lock()
	fake.getAlgorithmInputConfigsArgsForCall = append(fake.getAlgorithmInputConfigsArgsForCall, struct {
		db      *algorithm.VersionsDB
		jobName string
		inputs  []config.JobInput
	}{db, jobName, inputsCopy})
	fake.recordInvocation("GetAlgorithmInputConfigs", []interface{}{db, jobName, inputsCopy})
	fake.getAlgorithmInputConfigsMutex.Unlock()
	if fake.GetAlgorithmInputConfigsStub != nil {
		return fake.GetAlgorithmInputConfigsStub(db, jobName, inputs)
	} else {
		return fake.getAlgorithmInputConfigsReturns.result1, fake.getAlgorithmInputConfigsReturns.result2
	}
}

func (fake *FakeInputMapperDB) GetAlgorithmInputConfigsCallCount() int {
	fake.getAlgorithmInputConfigsMutex.RLock()
	defer fake.getAlgorithmInputConfigsMutex.RUnlock()
	return len(fake.getAlgorithmInputConfigsArgsForCall)
}

func (fake *FakeInputMapperDB) GetAlgorithmInputConfigsArgsForCall(i int) (*algorithm.VersionsDB, string, []config.JobInput) {
	fake.getAlgorithmInputConfigsMutex.RLock()
	defer fake.getAlgorithmInputConfigsMutex.RUnlock()
	return fake.getAlgorithmInputConfigsArgsForCall[i].db, fake.getAlgorithmInputConfigsArgsForCall[i].jobName, fake.getAlgorithmInputConfigsArgsForCall[i].inputs
}

func (fake *FakeInputMapperDB) GetAlgorithmInputConfigsReturns(result1 algorithm.InputConfigs, result2 error) {
	fake.GetAlgorithmInputConfigsStub = nil
	fake.getAlgorithmInputConfigsReturns = struct {
		result1 algorithm.InputConfigs
		result2 error
	}{result1, result2}
}

func (fake *FakeInputMapperDB) SaveIndependentInputMapping(inputVersions algorithm.InputMapping, jobName string) error {
	fake.saveIndependentInputMappingMutex.Lock()
	fake.saveIndependentInputMappingArgsForCall = append(fake.saveIndependentInputMappingArgsForCall, struct {
		inputVersions algorithm.InputMapping
		jobName       string
	}{inputVersions, jobName})
	fake.recordInvocation("SaveIndependentInputMapping", []interface{}{inputVersions, jobName})
	fake.saveIndependentInputMappingMutex.Unlock()
	if fake.SaveIndependentInputMappingStub != nil {
		return fake.SaveIndependentInputMappingStub(inputVersions, jobName)
	} else {
		return fake.saveIndependentInputMappingReturns.result1
	}
}

func (fake *FakeInputMapperDB) SaveIndependentInputMappingCallCount() int {
	fake.saveIndependentInputMappingMutex.RLock()
	defer fake.saveIndependentInputMappingMutex.RUnlock()
	return len(fake.saveIndependentInputMappingArgsForCall)
}

func (fake *FakeInputMapperDB) SaveIndependentInputMappingArgsForCall(i int) (algorithm.InputMapping, string) {
	fake.saveIndependentInputMappingMutex.RLock()
	defer fake.saveIndependentInputMappingMutex.RUnlock()
	return fake.saveIndependentInputMappingArgsForCall[i].inputVersions, fake.saveIndependentInputMappingArgsForCall[i].jobName
}

func (fake *FakeInputMapperDB) SaveIndependentInputMappingReturns(result1 error) {
	fake.SaveIndependentInputMappingStub = nil
	fake.saveIndependentInputMappingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInputMapperDB) SaveNextInputMapping(inputVersions algorithm.InputMapping, jobName string) error {
	fake.saveNextInputMappingMutex.Lock()
	fake.saveNextInputMappingArgsForCall = append(fake.saveNextInputMappingArgsForCall, struct {
		inputVersions algorithm.InputMapping
		jobName       string
	}{inputVersions, jobName})
	fake.recordInvocation("SaveNextInputMapping", []interface{}{inputVersions, jobName})
	fake.saveNextInputMappingMutex.Unlock()
	if fake.SaveNextInputMappingStub != nil {
		return fake.SaveNextInputMappingStub(inputVersions, jobName)
	} else {
		return fake.saveNextInputMappingReturns.result1
	}
}

func (fake *FakeInputMapperDB) SaveNextInputMappingCallCount() int {
	fake.saveNextInputMappingMutex.RLock()
	defer fake.saveNextInputMappingMutex.RUnlock()
	return len(fake.saveNextInputMappingArgsForCall)
}

func (fake *FakeInputMapperDB) SaveNextInputMappingArgsForCall(i int) (algorithm.InputMapping, string) {
	fake.saveNextInputMappingMutex.RLock()
	defer fake.saveNextInputMappingMutex.RUnlock()
	return fake.saveNextInputMappingArgsForCall[i].inputVersions, fake.saveNextInputMappingArgsForCall[i].jobName
}

func (fake *FakeInputMapperDB) SaveNextInputMappingReturns(result1 error) {
	fake.SaveNextInputMappingStub = nil
	fake.saveNextInputMappingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInputMapperDB) DeleteNextInputMapping(jobName string) error {
	fake.deleteNextInputMappingMutex.Lock()
	fake.deleteNextInputMappingArgsForCall = append(fake.deleteNextInputMappingArgsForCall, struct {
		jobName string
	}{jobName})
	fake.recordInvocation("DeleteNextInputMapping", []interface{}{jobName})
	fake.deleteNextInputMappingMutex.Unlock()
	if fake.DeleteNextInputMappingStub != nil {
		return fake.DeleteNextInputMappingStub(jobName)
	} else {
		return fake.deleteNextInputMappingReturns.result1
	}
}

func (fake *FakeInputMapperDB) DeleteNextInputMappingCallCount() int {
	fake.deleteNextInputMappingMutex.RLock()
	defer fake.deleteNextInputMappingMutex.RUnlock()
	return len(fake.deleteNextInputMappingArgsForCall)
}

func (fake *FakeInputMapperDB) DeleteNextInputMappingArgsForCall(i int) string {
	fake.deleteNextInputMappingMutex.RLock()
	defer fake.deleteNextInputMappingMutex.RUnlock()
	return fake.deleteNextInputMappingArgsForCall[i].jobName
}

func (fake *FakeInputMapperDB) DeleteNextInputMappingReturns(result1 error) {
	fake.DeleteNextInputMappingStub = nil
	fake.deleteNextInputMappingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInputMapperDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAlgorithmInputConfigsMutex.RLock()
	defer fake.getAlgorithmInputConfigsMutex.RUnlock()
	fake.saveIndependentInputMappingMutex.RLock()
	defer fake.saveIndependentInputMappingMutex.RUnlock()
	fake.saveNextInputMappingMutex.RLock()
	defer fake.saveNextInputMappingMutex.RUnlock()
	fake.deleteNextInputMappingMutex.RLock()
	defer fake.deleteNextInputMappingMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeInputMapperDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scheduler.InputMapperDB = new(FakeInputMapperDB)
