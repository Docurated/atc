// This file was generated by counterfeiter
package dbfakes

import (
	"database/sql"
	"sync"

	"github.com/concourse/atc/db"
)

type FakeLeaseTester struct {
	AttemptSignStub        func(db.Tx) (sql.Result, error)
	attemptSignMutex       sync.RWMutex
	attemptSignArgsForCall []struct {
		arg1 db.Tx
	}
	attemptSignReturns struct {
		result1 sql.Result
		result2 error
	}
	HeartbeatStub        func(db.Tx) (sql.Result, error)
	heartbeatMutex       sync.RWMutex
	heartbeatArgsForCall []struct {
		arg1 db.Tx
	}
	heartbeatReturns struct {
		result1 sql.Result
		result2 error
	}
	BreakStub        func()
	breakMutex       sync.RWMutex
	breakArgsForCall []struct{}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLeaseTester) AttemptSign(arg1 db.Tx) (sql.Result, error) {
	fake.attemptSignMutex.Lock()
	fake.attemptSignArgsForCall = append(fake.attemptSignArgsForCall, struct {
		arg1 db.Tx
	}{arg1})
	fake.recordInvocation("AttemptSign", []interface{}{arg1})
	fake.attemptSignMutex.Unlock()
	if fake.AttemptSignStub != nil {
		return fake.AttemptSignStub(arg1)
	} else {
		return fake.attemptSignReturns.result1, fake.attemptSignReturns.result2
	}
}

func (fake *FakeLeaseTester) AttemptSignCallCount() int {
	fake.attemptSignMutex.RLock()
	defer fake.attemptSignMutex.RUnlock()
	return len(fake.attemptSignArgsForCall)
}

func (fake *FakeLeaseTester) AttemptSignArgsForCall(i int) db.Tx {
	fake.attemptSignMutex.RLock()
	defer fake.attemptSignMutex.RUnlock()
	return fake.attemptSignArgsForCall[i].arg1
}

func (fake *FakeLeaseTester) AttemptSignReturns(result1 sql.Result, result2 error) {
	fake.AttemptSignStub = nil
	fake.attemptSignReturns = struct {
		result1 sql.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeLeaseTester) Heartbeat(arg1 db.Tx) (sql.Result, error) {
	fake.heartbeatMutex.Lock()
	fake.heartbeatArgsForCall = append(fake.heartbeatArgsForCall, struct {
		arg1 db.Tx
	}{arg1})
	fake.recordInvocation("Heartbeat", []interface{}{arg1})
	fake.heartbeatMutex.Unlock()
	if fake.HeartbeatStub != nil {
		return fake.HeartbeatStub(arg1)
	} else {
		return fake.heartbeatReturns.result1, fake.heartbeatReturns.result2
	}
}

func (fake *FakeLeaseTester) HeartbeatCallCount() int {
	fake.heartbeatMutex.RLock()
	defer fake.heartbeatMutex.RUnlock()
	return len(fake.heartbeatArgsForCall)
}

func (fake *FakeLeaseTester) HeartbeatArgsForCall(i int) db.Tx {
	fake.heartbeatMutex.RLock()
	defer fake.heartbeatMutex.RUnlock()
	return fake.heartbeatArgsForCall[i].arg1
}

func (fake *FakeLeaseTester) HeartbeatReturns(result1 sql.Result, result2 error) {
	fake.HeartbeatStub = nil
	fake.heartbeatReturns = struct {
		result1 sql.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeLeaseTester) Break() {
	fake.breakMutex.Lock()
	fake.breakArgsForCall = append(fake.breakArgsForCall, struct{}{})
	fake.recordInvocation("Break", []interface{}{})
	fake.breakMutex.Unlock()
	if fake.BreakStub != nil {
		fake.BreakStub()
	}
}

func (fake *FakeLeaseTester) BreakCallCount() int {
	fake.breakMutex.RLock()
	defer fake.breakMutex.RUnlock()
	return len(fake.breakArgsForCall)
}

func (fake *FakeLeaseTester) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.attemptSignMutex.RLock()
	defer fake.attemptSignMutex.RUnlock()
	fake.heartbeatMutex.RLock()
	defer fake.heartbeatMutex.RUnlock()
	fake.breakMutex.RLock()
	defer fake.breakMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLeaseTester) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.LeaseTester = new(FakeLeaseTester)
