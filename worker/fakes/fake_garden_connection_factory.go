// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	gconn "github.com/cloudfoundry-incubator/garden/client/connection"
	"github.com/concourse/atc/worker"
)

type FakeGardenConnectionFactory struct {
	BuildConnectionStub        func() gconn.Connection
	buildConnectionMutex       sync.RWMutex
	buildConnectionArgsForCall []struct{}
	buildConnectionReturns     struct {
		result1 gconn.Connection
	}
	BuildConnectionFromDBStub        func() (gconn.Connection, error)
	buildConnectionFromDBMutex       sync.RWMutex
	buildConnectionFromDBArgsForCall []struct{}
	buildConnectionFromDBReturns     struct {
		result1 gconn.Connection
		result2 error
	}
	GetDBStub        func() worker.GardenConnectionFactoryDB
	getDBMutex       sync.RWMutex
	getDBArgsForCall []struct{}
	getDBReturns     struct {
		result1 worker.GardenConnectionFactoryDB
	}
	CreateRetryableHttpClientStub        func() http.Client
	createRetryableHttpClientMutex       sync.RWMutex
	createRetryableHttpClientArgsForCall []struct{}
	createRetryableHttpClientReturns     struct {
		result1 http.Client
	}
}

func (fake *FakeGardenConnectionFactory) BuildConnection() gconn.Connection {
	fake.buildConnectionMutex.Lock()
	fake.buildConnectionArgsForCall = append(fake.buildConnectionArgsForCall, struct{}{})
	fake.buildConnectionMutex.Unlock()
	if fake.BuildConnectionStub != nil {
		return fake.BuildConnectionStub()
	} else {
		return fake.buildConnectionReturns.result1
	}
}

func (fake *FakeGardenConnectionFactory) BuildConnectionCallCount() int {
	fake.buildConnectionMutex.RLock()
	defer fake.buildConnectionMutex.RUnlock()
	return len(fake.buildConnectionArgsForCall)
}

func (fake *FakeGardenConnectionFactory) BuildConnectionReturns(result1 gconn.Connection) {
	fake.BuildConnectionStub = nil
	fake.buildConnectionReturns = struct {
		result1 gconn.Connection
	}{result1}
}

func (fake *FakeGardenConnectionFactory) BuildConnectionFromDB() (gconn.Connection, error) {
	fake.buildConnectionFromDBMutex.Lock()
	fake.buildConnectionFromDBArgsForCall = append(fake.buildConnectionFromDBArgsForCall, struct{}{})
	fake.buildConnectionFromDBMutex.Unlock()
	if fake.BuildConnectionFromDBStub != nil {
		return fake.BuildConnectionFromDBStub()
	} else {
		return fake.buildConnectionFromDBReturns.result1, fake.buildConnectionFromDBReturns.result2
	}
}

func (fake *FakeGardenConnectionFactory) BuildConnectionFromDBCallCount() int {
	fake.buildConnectionFromDBMutex.RLock()
	defer fake.buildConnectionFromDBMutex.RUnlock()
	return len(fake.buildConnectionFromDBArgsForCall)
}

func (fake *FakeGardenConnectionFactory) BuildConnectionFromDBReturns(result1 gconn.Connection, result2 error) {
	fake.BuildConnectionFromDBStub = nil
	fake.buildConnectionFromDBReturns = struct {
		result1 gconn.Connection
		result2 error
	}{result1, result2}
}

func (fake *FakeGardenConnectionFactory) GetDB() worker.GardenConnectionFactoryDB {
	fake.getDBMutex.Lock()
	fake.getDBArgsForCall = append(fake.getDBArgsForCall, struct{}{})
	fake.getDBMutex.Unlock()
	if fake.GetDBStub != nil {
		return fake.GetDBStub()
	} else {
		return fake.getDBReturns.result1
	}
}

func (fake *FakeGardenConnectionFactory) GetDBCallCount() int {
	fake.getDBMutex.RLock()
	defer fake.getDBMutex.RUnlock()
	return len(fake.getDBArgsForCall)
}

func (fake *FakeGardenConnectionFactory) GetDBReturns(result1 worker.GardenConnectionFactoryDB) {
	fake.GetDBStub = nil
	fake.getDBReturns = struct {
		result1 worker.GardenConnectionFactoryDB
	}{result1}
}

func (fake *FakeGardenConnectionFactory) CreateRetryableHttpClient() http.Client {
	fake.createRetryableHttpClientMutex.Lock()
	fake.createRetryableHttpClientArgsForCall = append(fake.createRetryableHttpClientArgsForCall, struct{}{})
	fake.createRetryableHttpClientMutex.Unlock()
	if fake.CreateRetryableHttpClientStub != nil {
		return fake.CreateRetryableHttpClientStub()
	} else {
		return fake.createRetryableHttpClientReturns.result1
	}
}

func (fake *FakeGardenConnectionFactory) CreateRetryableHttpClientCallCount() int {
	fake.createRetryableHttpClientMutex.RLock()
	defer fake.createRetryableHttpClientMutex.RUnlock()
	return len(fake.createRetryableHttpClientArgsForCall)
}

func (fake *FakeGardenConnectionFactory) CreateRetryableHttpClientReturns(result1 http.Client) {
	fake.CreateRetryableHttpClientStub = nil
	fake.createRetryableHttpClientReturns = struct {
		result1 http.Client
	}{result1}
}

var _ worker.GardenConnectionFactory = new(FakeGardenConnectionFactory)
