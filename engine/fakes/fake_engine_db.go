// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/db"
	"github.com/concourse/atc/engine"
)

type FakeEngineDB struct {
	SaveBuildEventStub        func(buildID int, pipelineID int, event atc.Event) error
	saveBuildEventMutex       sync.RWMutex
	saveBuildEventArgsForCall []struct {
		buildID    int
		pipelineID int
		event      atc.Event
	}
	saveBuildEventReturns struct {
		result1 error
	}
	FinishBuildStub        func(buildID int, pipelineID int, status db.Status) error
	finishBuildMutex       sync.RWMutex
	finishBuildArgsForCall []struct {
		buildID    int
		pipelineID int
		status     db.Status
	}
	finishBuildReturns struct {
		result1 error
	}
	GetBuildStub        func(buildID int) (db.Build, bool, error)
	getBuildMutex       sync.RWMutex
	getBuildArgsForCall []struct {
		buildID int
	}
	getBuildReturns struct {
		result1 db.Build
		result2 bool
		result3 error
	}
	FindContainersByDescriptorsStub        func(db.Container) ([]db.SavedContainer, error)
	findContainersByDescriptorsMutex       sync.RWMutex
	findContainersByDescriptorsArgsForCall []struct {
		arg1 db.Container
	}
	findContainersByDescriptorsReturns struct {
		result1 []db.SavedContainer
		result2 error
	}
	FindLongLivedContainersStub        func(jobName string, pipelineID int) ([]db.SavedContainer, error)
	findLongLivedContainersMutex       sync.RWMutex
	findLongLivedContainersArgsForCall []struct {
		jobName    string
		pipelineID int
	}
	findLongLivedContainersReturns struct {
		result1 []db.SavedContainer
		result2 error
	}
	GetLatestFinishedBuildForJobStub        func(jobName string, pipelineID int) (db.Build, bool, error)
	getLatestFinishedBuildForJobMutex       sync.RWMutex
	getLatestFinishedBuildForJobArgsForCall []struct {
		jobName    string
		pipelineID int
	}
	getLatestFinishedBuildForJobReturns struct {
		result1 db.Build
		result2 bool
		result3 error
	}
	SaveBuildEngineMetadataStub        func(buildID int, metadata string) error
	saveBuildEngineMetadataMutex       sync.RWMutex
	saveBuildEngineMetadataArgsForCall []struct {
		buildID  int
		metadata string
	}
	saveBuildEngineMetadataReturns struct {
		result1 error
	}
	SaveBuildInputStub        func(buildID int, input db.BuildInput) (db.SavedVersionedResource, error)
	saveBuildInputMutex       sync.RWMutex
	saveBuildInputArgsForCall []struct {
		buildID int
		input   db.BuildInput
	}
	saveBuildInputReturns struct {
		result1 db.SavedVersionedResource
		result2 error
	}
	SaveBuildOutputStub        func(buildID int, vr db.VersionedResource, explicit bool) (db.SavedVersionedResource, error)
	saveBuildOutputMutex       sync.RWMutex
	saveBuildOutputArgsForCall []struct {
		buildID  int
		vr       db.VersionedResource
		explicit bool
	}
	saveBuildOutputReturns struct {
		result1 db.SavedVersionedResource
		result2 error
	}
	SaveImageResourceVersionStub        func(buildID int, planID atc.PlanID, identifier db.ResourceCacheIdentifier) error
	saveImageResourceVersionMutex       sync.RWMutex
	saveImageResourceVersionArgsForCall []struct {
		buildID    int
		planID     atc.PlanID
		identifier db.ResourceCacheIdentifier
	}
	saveImageResourceVersionReturns struct {
		result1 error
	}
	GetPipelineByTeamNameAndNameStub        func(teamName string, pipelineName string) (db.SavedPipeline, error)
	getPipelineByTeamNameAndNameMutex       sync.RWMutex
	getPipelineByTeamNameAndNameArgsForCall []struct {
		teamName     string
		pipelineName string
	}
	getPipelineByTeamNameAndNameReturns struct {
		result1 db.SavedPipeline
		result2 error
	}
}

func (fake *FakeEngineDB) SaveBuildEvent(buildID int, pipelineID int, event atc.Event) error {
	fake.saveBuildEventMutex.Lock()
	fake.saveBuildEventArgsForCall = append(fake.saveBuildEventArgsForCall, struct {
		buildID    int
		pipelineID int
		event      atc.Event
	}{buildID, pipelineID, event})
	fake.saveBuildEventMutex.Unlock()
	if fake.SaveBuildEventStub != nil {
		return fake.SaveBuildEventStub(buildID, pipelineID, event)
	} else {
		return fake.saveBuildEventReturns.result1
	}
}

func (fake *FakeEngineDB) SaveBuildEventCallCount() int {
	fake.saveBuildEventMutex.RLock()
	defer fake.saveBuildEventMutex.RUnlock()
	return len(fake.saveBuildEventArgsForCall)
}

func (fake *FakeEngineDB) SaveBuildEventArgsForCall(i int) (int, int, atc.Event) {
	fake.saveBuildEventMutex.RLock()
	defer fake.saveBuildEventMutex.RUnlock()
	return fake.saveBuildEventArgsForCall[i].buildID, fake.saveBuildEventArgsForCall[i].pipelineID, fake.saveBuildEventArgsForCall[i].event
}

func (fake *FakeEngineDB) SaveBuildEventReturns(result1 error) {
	fake.SaveBuildEventStub = nil
	fake.saveBuildEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEngineDB) FinishBuild(buildID int, pipelineID int, status db.Status) error {
	fake.finishBuildMutex.Lock()
	fake.finishBuildArgsForCall = append(fake.finishBuildArgsForCall, struct {
		buildID    int
		pipelineID int
		status     db.Status
	}{buildID, pipelineID, status})
	fake.finishBuildMutex.Unlock()
	if fake.FinishBuildStub != nil {
		return fake.FinishBuildStub(buildID, pipelineID, status)
	} else {
		return fake.finishBuildReturns.result1
	}
}

func (fake *FakeEngineDB) FinishBuildCallCount() int {
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return len(fake.finishBuildArgsForCall)
}

func (fake *FakeEngineDB) FinishBuildArgsForCall(i int) (int, int, db.Status) {
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return fake.finishBuildArgsForCall[i].buildID, fake.finishBuildArgsForCall[i].pipelineID, fake.finishBuildArgsForCall[i].status
}

func (fake *FakeEngineDB) FinishBuildReturns(result1 error) {
	fake.FinishBuildStub = nil
	fake.finishBuildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEngineDB) GetBuild(buildID int) (db.Build, bool, error) {
	fake.getBuildMutex.Lock()
	fake.getBuildArgsForCall = append(fake.getBuildArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildMutex.Unlock()
	if fake.GetBuildStub != nil {
		return fake.GetBuildStub(buildID)
	} else {
		return fake.getBuildReturns.result1, fake.getBuildReturns.result2, fake.getBuildReturns.result3
	}
}

func (fake *FakeEngineDB) GetBuildCallCount() int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return len(fake.getBuildArgsForCall)
}

func (fake *FakeEngineDB) GetBuildArgsForCall(i int) int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return fake.getBuildArgsForCall[i].buildID
}

func (fake *FakeEngineDB) GetBuildReturns(result1 db.Build, result2 bool, result3 error) {
	fake.GetBuildStub = nil
	fake.getBuildReturns = struct {
		result1 db.Build
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeEngineDB) FindContainersByDescriptors(arg1 db.Container) ([]db.SavedContainer, error) {
	fake.findContainersByDescriptorsMutex.Lock()
	fake.findContainersByDescriptorsArgsForCall = append(fake.findContainersByDescriptorsArgsForCall, struct {
		arg1 db.Container
	}{arg1})
	fake.findContainersByDescriptorsMutex.Unlock()
	if fake.FindContainersByDescriptorsStub != nil {
		return fake.FindContainersByDescriptorsStub(arg1)
	} else {
		return fake.findContainersByDescriptorsReturns.result1, fake.findContainersByDescriptorsReturns.result2
	}
}

func (fake *FakeEngineDB) FindContainersByDescriptorsCallCount() int {
	fake.findContainersByDescriptorsMutex.RLock()
	defer fake.findContainersByDescriptorsMutex.RUnlock()
	return len(fake.findContainersByDescriptorsArgsForCall)
}

func (fake *FakeEngineDB) FindContainersByDescriptorsArgsForCall(i int) db.Container {
	fake.findContainersByDescriptorsMutex.RLock()
	defer fake.findContainersByDescriptorsMutex.RUnlock()
	return fake.findContainersByDescriptorsArgsForCall[i].arg1
}

func (fake *FakeEngineDB) FindContainersByDescriptorsReturns(result1 []db.SavedContainer, result2 error) {
	fake.FindContainersByDescriptorsStub = nil
	fake.findContainersByDescriptorsReturns = struct {
		result1 []db.SavedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeEngineDB) FindLongLivedContainers(jobName string, pipelineID int) ([]db.SavedContainer, error) {
	fake.findLongLivedContainersMutex.Lock()
	fake.findLongLivedContainersArgsForCall = append(fake.findLongLivedContainersArgsForCall, struct {
		jobName    string
		pipelineID int
	}{jobName, pipelineID})
	fake.findLongLivedContainersMutex.Unlock()
	if fake.FindLongLivedContainersStub != nil {
		return fake.FindLongLivedContainersStub(jobName, pipelineID)
	} else {
		return fake.findLongLivedContainersReturns.result1, fake.findLongLivedContainersReturns.result2
	}
}

func (fake *FakeEngineDB) FindLongLivedContainersCallCount() int {
	fake.findLongLivedContainersMutex.RLock()
	defer fake.findLongLivedContainersMutex.RUnlock()
	return len(fake.findLongLivedContainersArgsForCall)
}

func (fake *FakeEngineDB) FindLongLivedContainersArgsForCall(i int) (string, int) {
	fake.findLongLivedContainersMutex.RLock()
	defer fake.findLongLivedContainersMutex.RUnlock()
	return fake.findLongLivedContainersArgsForCall[i].jobName, fake.findLongLivedContainersArgsForCall[i].pipelineID
}

func (fake *FakeEngineDB) FindLongLivedContainersReturns(result1 []db.SavedContainer, result2 error) {
	fake.FindLongLivedContainersStub = nil
	fake.findLongLivedContainersReturns = struct {
		result1 []db.SavedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeEngineDB) GetLatestFinishedBuildForJob(jobName string, pipelineID int) (db.Build, bool, error) {
	fake.getLatestFinishedBuildForJobMutex.Lock()
	fake.getLatestFinishedBuildForJobArgsForCall = append(fake.getLatestFinishedBuildForJobArgsForCall, struct {
		jobName    string
		pipelineID int
	}{jobName, pipelineID})
	fake.getLatestFinishedBuildForJobMutex.Unlock()
	if fake.GetLatestFinishedBuildForJobStub != nil {
		return fake.GetLatestFinishedBuildForJobStub(jobName, pipelineID)
	} else {
		return fake.getLatestFinishedBuildForJobReturns.result1, fake.getLatestFinishedBuildForJobReturns.result2, fake.getLatestFinishedBuildForJobReturns.result3
	}
}

func (fake *FakeEngineDB) GetLatestFinishedBuildForJobCallCount() int {
	fake.getLatestFinishedBuildForJobMutex.RLock()
	defer fake.getLatestFinishedBuildForJobMutex.RUnlock()
	return len(fake.getLatestFinishedBuildForJobArgsForCall)
}

func (fake *FakeEngineDB) GetLatestFinishedBuildForJobArgsForCall(i int) (string, int) {
	fake.getLatestFinishedBuildForJobMutex.RLock()
	defer fake.getLatestFinishedBuildForJobMutex.RUnlock()
	return fake.getLatestFinishedBuildForJobArgsForCall[i].jobName, fake.getLatestFinishedBuildForJobArgsForCall[i].pipelineID
}

func (fake *FakeEngineDB) GetLatestFinishedBuildForJobReturns(result1 db.Build, result2 bool, result3 error) {
	fake.GetLatestFinishedBuildForJobStub = nil
	fake.getLatestFinishedBuildForJobReturns = struct {
		result1 db.Build
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeEngineDB) SaveBuildEngineMetadata(buildID int, metadata string) error {
	fake.saveBuildEngineMetadataMutex.Lock()
	fake.saveBuildEngineMetadataArgsForCall = append(fake.saveBuildEngineMetadataArgsForCall, struct {
		buildID  int
		metadata string
	}{buildID, metadata})
	fake.saveBuildEngineMetadataMutex.Unlock()
	if fake.SaveBuildEngineMetadataStub != nil {
		return fake.SaveBuildEngineMetadataStub(buildID, metadata)
	} else {
		return fake.saveBuildEngineMetadataReturns.result1
	}
}

func (fake *FakeEngineDB) SaveBuildEngineMetadataCallCount() int {
	fake.saveBuildEngineMetadataMutex.RLock()
	defer fake.saveBuildEngineMetadataMutex.RUnlock()
	return len(fake.saveBuildEngineMetadataArgsForCall)
}

func (fake *FakeEngineDB) SaveBuildEngineMetadataArgsForCall(i int) (int, string) {
	fake.saveBuildEngineMetadataMutex.RLock()
	defer fake.saveBuildEngineMetadataMutex.RUnlock()
	return fake.saveBuildEngineMetadataArgsForCall[i].buildID, fake.saveBuildEngineMetadataArgsForCall[i].metadata
}

func (fake *FakeEngineDB) SaveBuildEngineMetadataReturns(result1 error) {
	fake.SaveBuildEngineMetadataStub = nil
	fake.saveBuildEngineMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEngineDB) SaveBuildInput(buildID int, input db.BuildInput) (db.SavedVersionedResource, error) {
	fake.saveBuildInputMutex.Lock()
	fake.saveBuildInputArgsForCall = append(fake.saveBuildInputArgsForCall, struct {
		buildID int
		input   db.BuildInput
	}{buildID, input})
	fake.saveBuildInputMutex.Unlock()
	if fake.SaveBuildInputStub != nil {
		return fake.SaveBuildInputStub(buildID, input)
	} else {
		return fake.saveBuildInputReturns.result1, fake.saveBuildInputReturns.result2
	}
}

func (fake *FakeEngineDB) SaveBuildInputCallCount() int {
	fake.saveBuildInputMutex.RLock()
	defer fake.saveBuildInputMutex.RUnlock()
	return len(fake.saveBuildInputArgsForCall)
}

func (fake *FakeEngineDB) SaveBuildInputArgsForCall(i int) (int, db.BuildInput) {
	fake.saveBuildInputMutex.RLock()
	defer fake.saveBuildInputMutex.RUnlock()
	return fake.saveBuildInputArgsForCall[i].buildID, fake.saveBuildInputArgsForCall[i].input
}

func (fake *FakeEngineDB) SaveBuildInputReturns(result1 db.SavedVersionedResource, result2 error) {
	fake.SaveBuildInputStub = nil
	fake.saveBuildInputReturns = struct {
		result1 db.SavedVersionedResource
		result2 error
	}{result1, result2}
}

func (fake *FakeEngineDB) SaveBuildOutput(buildID int, vr db.VersionedResource, explicit bool) (db.SavedVersionedResource, error) {
	fake.saveBuildOutputMutex.Lock()
	fake.saveBuildOutputArgsForCall = append(fake.saveBuildOutputArgsForCall, struct {
		buildID  int
		vr       db.VersionedResource
		explicit bool
	}{buildID, vr, explicit})
	fake.saveBuildOutputMutex.Unlock()
	if fake.SaveBuildOutputStub != nil {
		return fake.SaveBuildOutputStub(buildID, vr, explicit)
	} else {
		return fake.saveBuildOutputReturns.result1, fake.saveBuildOutputReturns.result2
	}
}

func (fake *FakeEngineDB) SaveBuildOutputCallCount() int {
	fake.saveBuildOutputMutex.RLock()
	defer fake.saveBuildOutputMutex.RUnlock()
	return len(fake.saveBuildOutputArgsForCall)
}

func (fake *FakeEngineDB) SaveBuildOutputArgsForCall(i int) (int, db.VersionedResource, bool) {
	fake.saveBuildOutputMutex.RLock()
	defer fake.saveBuildOutputMutex.RUnlock()
	return fake.saveBuildOutputArgsForCall[i].buildID, fake.saveBuildOutputArgsForCall[i].vr, fake.saveBuildOutputArgsForCall[i].explicit
}

func (fake *FakeEngineDB) SaveBuildOutputReturns(result1 db.SavedVersionedResource, result2 error) {
	fake.SaveBuildOutputStub = nil
	fake.saveBuildOutputReturns = struct {
		result1 db.SavedVersionedResource
		result2 error
	}{result1, result2}
}

func (fake *FakeEngineDB) SaveImageResourceVersion(buildID int, planID atc.PlanID, identifier db.ResourceCacheIdentifier) error {
	fake.saveImageResourceVersionMutex.Lock()
	fake.saveImageResourceVersionArgsForCall = append(fake.saveImageResourceVersionArgsForCall, struct {
		buildID    int
		planID     atc.PlanID
		identifier db.ResourceCacheIdentifier
	}{buildID, planID, identifier})
	fake.saveImageResourceVersionMutex.Unlock()
	if fake.SaveImageResourceVersionStub != nil {
		return fake.SaveImageResourceVersionStub(buildID, planID, identifier)
	} else {
		return fake.saveImageResourceVersionReturns.result1
	}
}

func (fake *FakeEngineDB) SaveImageResourceVersionCallCount() int {
	fake.saveImageResourceVersionMutex.RLock()
	defer fake.saveImageResourceVersionMutex.RUnlock()
	return len(fake.saveImageResourceVersionArgsForCall)
}

func (fake *FakeEngineDB) SaveImageResourceVersionArgsForCall(i int) (int, atc.PlanID, db.ResourceCacheIdentifier) {
	fake.saveImageResourceVersionMutex.RLock()
	defer fake.saveImageResourceVersionMutex.RUnlock()
	return fake.saveImageResourceVersionArgsForCall[i].buildID, fake.saveImageResourceVersionArgsForCall[i].planID, fake.saveImageResourceVersionArgsForCall[i].identifier
}

func (fake *FakeEngineDB) SaveImageResourceVersionReturns(result1 error) {
	fake.SaveImageResourceVersionStub = nil
	fake.saveImageResourceVersionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEngineDB) GetPipelineByTeamNameAndName(teamName string, pipelineName string) (db.SavedPipeline, error) {
	fake.getPipelineByTeamNameAndNameMutex.Lock()
	fake.getPipelineByTeamNameAndNameArgsForCall = append(fake.getPipelineByTeamNameAndNameArgsForCall, struct {
		teamName     string
		pipelineName string
	}{teamName, pipelineName})
	fake.getPipelineByTeamNameAndNameMutex.Unlock()
	if fake.GetPipelineByTeamNameAndNameStub != nil {
		return fake.GetPipelineByTeamNameAndNameStub(teamName, pipelineName)
	} else {
		return fake.getPipelineByTeamNameAndNameReturns.result1, fake.getPipelineByTeamNameAndNameReturns.result2
	}
}

func (fake *FakeEngineDB) GetPipelineByTeamNameAndNameCallCount() int {
	fake.getPipelineByTeamNameAndNameMutex.RLock()
	defer fake.getPipelineByTeamNameAndNameMutex.RUnlock()
	return len(fake.getPipelineByTeamNameAndNameArgsForCall)
}

func (fake *FakeEngineDB) GetPipelineByTeamNameAndNameArgsForCall(i int) (string, string) {
	fake.getPipelineByTeamNameAndNameMutex.RLock()
	defer fake.getPipelineByTeamNameAndNameMutex.RUnlock()
	return fake.getPipelineByTeamNameAndNameArgsForCall[i].teamName, fake.getPipelineByTeamNameAndNameArgsForCall[i].pipelineName
}

func (fake *FakeEngineDB) GetPipelineByTeamNameAndNameReturns(result1 db.SavedPipeline, result2 error) {
	fake.GetPipelineByTeamNameAndNameStub = nil
	fake.getPipelineByTeamNameAndNameReturns = struct {
		result1 db.SavedPipeline
		result2 error
	}{result1, result2}
}

var _ engine.EngineDB = new(FakeEngineDB)
